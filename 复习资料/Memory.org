* 内存管理

+ *单一内存分配*
内存被分为两部分，一个是系统区域，仅供操作系统使用；另一部分是用户区。任何时候主存储器中最多只有一个进程。
  
+ *固定分区分配*

  1. 大小固定的分区方案：系统运行期间不再重新划分，每个分区的位置都固定。
  2. 大小不等的分区方案：将分区按大小排队。

+ 动态分区分配
  在程序载入内存时，根据所需的大小动态创建分区，并使得分区的大小正好适合进程的需要。

** 分配算法

+ *首次适应 First Fit*

  是指空闲分区以地址递增的顺序链接，也就是按顺序查找，找到大小能够满足要求的第一个空闲分区。这个算法倾向于优先利用内存中的低地址的空闲部分，保留高地址部分的空闲区，为以后到达的大作业分配大空间创造条件。
  缺点在于：低地址部分由于不断被划分，会留下许多难以利用的小空闲分区，并且每次都从低地址开始检索，将增大可用空闲区间查找的开销。
  

+ *最佳适应 Best Fit*

  指空闲分区按容量大小 *递增* 形成分区链，找到第一个能满足要求的空闲分区。存储器会留下许多难以利用的小空闲区。
  
+ *最坏适应 Worst Fit*

  又称为最大适应，是指空闲分区以容量 *递减* 的顺序链接，找到第一个满足要求的空闲分区。这个算法的优点是使剩下的空闲区不至于太小，产生碎片的概率最小。

三种算法的比较
[[file:~/codes/Stuff/src/image/MemAlloc.png]]

** 分页存储管理
将进程的逻辑地址空间分成若干个大小相等的页面（虚页面）。

*** 多级页表

当计算机拥有很大的逻辑地址空间，因此页表变得非常大的时候，会占用很多内存，而页表需要连续存放在内存中，这种情况下：

+ 采用两级（多级）页表
+ 只需将当前需要的部分页表项调入内存，其余的页表项仍驻留在磁盘上，需要时再调用。

  优点：
1. 解决了进程在内存空间非连续存放的问题，没有外碎片，每个进程产生的内存碎片不超过1页的大小。
** 段式管理
系统为每一个进程创建一张段表，每个段在表中有一个表项，包含三个数据项：段号、段长、内存起始地址。

段表的主要功能是实现逻辑段到内存空间之间的映射。

段氏存储管理系统以段为单位进行内存分配，每段在主存中占有一个连续空间。

** 段页式管理

基本思想：一个进程仍然拥有一个自己的二维地址空间。一个进程中所包含的独立逻辑功能的程序或数据被划分为段，并有各自的段号s；对于s中的程序或数据，则按照一定的大小g将其划分为不同的页。

段页式存储管理系统的进程虚拟地址由三部分组成：段号s、页号p和页内偏移量d。

** 页面置换算法

+ *先进先出FIFO*

  总是选择在主存中停留时间最长的页面进行置换。理由是最早被调入内存的页，其不再被使用的可能性比较大。

  虽然实现简单，但是性能却不甚理想。一方面，被置换的页面可能是很久之前就使用过的但是现在不再使用的初始化模块；另一方面，所置换的页面可以包含一个被大量使用的变量。
+ *最优OPT*

  其所选择的被淘汰页面是以后永不使用的，或许在最长时间内不再被访问的页面。
  问题是，无法预知一个页面是否还会不会被使用，所以无法实现。
+ *最久未使用LRU算法*

  略。
+ *近似LRU页面置换算法——二次机会页面页面置换*

  当一个页面得到二次机会时，他的访问位就请为0，知道其他所有页面被淘汰过。如果一个页面经常使用，他的访问位就总是保持为1,不会被淘汰出去。

** 页帧分配算法
+ *页面缓冲算法*
  1. 空闲页面链表
     分配给频繁发生缺页的进程，降低其缺页率。
     当这样的一个进程o需要读入一个页面的时候，便可以利用空闲页帧链表中的第一个页帧来装入该页。当有一个未被修改的页需要换出时，实际上并不将他换出到外存，而是把它所在的页帧挂在空闲链表的末尾。

  2. 修改页面链表
     为了减少已修改页面换出的次数，需要将一个已修改的页面换出时，系统并不立即把它换出到外存上，而是把它所在的物理块挂在修改页面链表的末尾。
+ *页帧分配算法*

  1. 平均分配法：没有考虑到不同的进程可能需要不同大小的内存空间。
  2. 按比例分配法：优先级越高的进程期望获得的页帧越多，以便更快地执行。

** 页帧分配策略

系统抖动：分配的页帧太少；置换算法选择不当。

解决方案：
1. 工作集策略：依靠进程执行的局部性模型。
   [[file:~/codes/Stuff/src/image/WorkSet.png]]

2. 缺页率策略：设置缺页率的上下限。

